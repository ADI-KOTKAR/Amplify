Index: Pages/MusicPage/Components/Content/Components/MenuFrame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\n\r\n\r\nclass MenuFrame(tk.Frame):\r\n    def __init__(self, master, title, album, artist, *args, **kwargs):\r\n        tk.Frame.__init__(self, master, *args, **kwargs)\r\n        self['background'] = '#181818'\r\n\r\n        self.menu_image = tk.PhotoImage(file=r'images/menu_icon.png')\r\n\r\n        # self.menuButton = tk.Button(self,\r\n        #                             image=self.menu_image,\r\n        #                             relief=tk.FLAT,\r\n        #                             bd=0,\r\n        #                             background='#181818',\r\n        #                             activebackground='#333333')\r\n\r\n        self.title = \"Title: {}\".format(title)\r\n        self.artist = \"Artist: {}\".format(artist)\r\n        self.album = \"Album: {}\".format(album)\r\n        self.menuButton = tk.Menubutton(\r\n                                self,\r\n                                image=self.menu_image,\r\n                                bd=0,\r\n                                background=\"#181818\",\r\n                                activebackground=\"#181818\",\r\n                                direction=tk.LEFT\r\n                            )\r\n        self.menuButton.menu = tk.Menu(\r\n                                    self.menuButton,\r\n                                    tearoff=0,\r\n                                    background=\"#404040\",\r\n                                    activebackground=\"#404040\",\r\n                                    foreground=\"white\",\r\n                                    activeforeground=\"white\",\r\n                                    bd=0\r\n                                )\r\n        self.menuButton['menu'] = self.menuButton.menu\r\n        self.menuButton.menu.add_command(label=self.title, command=None)\r\n        self.menuButton.menu.add_command(label=self.artist, command=None)\r\n        self.menuButton.menu.add_command(label=self.album, command=None)\r\n\r\n        self.grid_columnconfigure(0, weight=1)\r\n        self.grid_rowconfigure(0, weight=1)\r\n\r\n        self.menuButton.bind('<Button-1>', self.master.click)\r\n\r\n        self.bind('<Button-1>', self.master.click)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Pages/MusicPage/Components/Content/Components/MenuFrame.py	(revision e49b903c75f6ed87827e97ccafe151cd1bc26257)
+++ Pages/MusicPage/Components/Content/Components/MenuFrame.py	(date 1587939505099)
@@ -40,9 +40,20 @@
         self.menuButton.menu.add_command(label=self.artist, command=None)
         self.menuButton.menu.add_command(label=self.album, command=None)
 
+        #self.menuButton.bind("<Enter>",lambda e: self.menuEnter(e))
+        #self.menuButton.bind("<Leave>",lambda e: self.menuLeave(e))
+
         self.grid_columnconfigure(0, weight=1)
         self.grid_rowconfigure(0, weight=1)
 
         self.menuButton.bind('<Button-1>', self.master.click)
 
         self.bind('<Button-1>', self.master.click)
+
+    def menuEnter(self,event):
+        self.menuButton['bg'] = "#333333",
+        self.menuButton['activebackground'] = "#333333"
+
+    def menuLeave(self,event):
+        self.menuButton['bg'] = "#222222",
+        self.menuButton['activebackground'] = "#222222"
Index: Pages/MusicPage/Components/Content/Components/MusicFrame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom Pages.MusicPage.Components.Content.Components.ContentLabel import ContentLabel\r\nfrom Pages.MusicPage.Components.Content.Components.LikeButton import LikeButton\r\nfrom Pages.MusicPage.Components.Content.Components.MenuFrame import MenuFrame\r\nfrom Pages.MusicPage.Components.Content.Components.PlayButton import PlayButton\r\nfrom PIL import Image, ImageTk\r\nfrom Music.track import Track\r\n\r\n\r\nclass MusicFrame(tk.Frame):\r\n    def __init__(self, master, *args, **kwargs):\r\n        self.title = kwargs.pop('title')\r\n        self.album = kwargs.pop('album')\r\n        self.url = kwargs.pop('url')\r\n        self.artist = kwargs.pop('artist')\r\n        tk.Frame.__init__(self, master, *args, **kwargs)\r\n        self['background'] = '#181818'\r\n        self['height'] = 40\r\n\r\n        self.play_music = None\r\n\r\n        self.pause_icon = self.prepare_icon('pause_icon.png', size=25)\r\n        self.music_icon = self.prepare_icon('music_icon.png', size=16)\r\n        self.volume_icon = self.prepare_icon('volume_icon.png', size=25)\r\n\r\n        self.iconFrame = tk.Frame(self, bg='#181818')\r\n        self.titleFrame = tk.Frame(self, bg='#181818')\r\n        self.artistFrame = tk.Frame(self, bg='#181818')\r\n        self.albumFrame = tk.Frame(self, bg='#181818')\r\n        self.menuFrame = MenuFrame(self, bg='#181818', title=self.title, album=self.album, artist=self.artist)\r\n\r\n        self.iconFrame.grid(row=0, column=0, sticky='nsew')\r\n        self.titleFrame.grid(row=0, column=1, sticky='nsew')\r\n        self.artistFrame.grid(row=0, column=2, sticky='nsew')\r\n        self.albumFrame.grid(row=0, column=3, sticky='nsew')\r\n        self.menuFrame.grid(row=0, column=4, sticky='nsew')\r\n\r\n        self.play_button = PlayButton(self.iconFrame,\r\n                                      title=self.title,\r\n                                      url=self.url)\r\n        self.like_button = LikeButton(self.iconFrame,\r\n                                      title=self.title,\r\n                                      album=self.album,\r\n                                      artist=self.artist,\r\n                                      url=self.url)\r\n\r\n        self.play_button.grid(row=0, column=0, sticky='nsew')\r\n        self.like_button.grid(row=0, column=1, sticky='nsew')\r\n\r\n        self.iconFrame.grid_columnconfigure((0, 1), weight=1)\r\n        self.iconFrame.grid_rowconfigure(0, weight=1)\r\n        self.iconFrame.grid_propagate(False)\r\n\r\n        self.titleLabel = ContentLabel(self.titleFrame, text=self.title)\r\n        self.titleLabel.grid(row=0, column=0, sticky='nsew')\r\n        self.titleFrame.grid_columnconfigure(0, weight=1)\r\n        self.titleFrame.grid_rowconfigure(0, weight=1)\r\n\r\n        self.artistLabel = ContentLabel(self.artistFrame, text=self.album)\r\n        self.artistLabel.grid(row=0, column=0, sticky='nsew')\r\n        self.artistFrame.grid_columnconfigure(0, weight=1)\r\n        self.artistFrame.grid_rowconfigure(0, weight=1)\r\n\r\n        self.albumLabel = ContentLabel(self.albumFrame, text=self.artist)\r\n        self.albumLabel.grid(row=0, column=0, sticky='nsew')\r\n        self.albumFrame.grid_columnconfigure(0, weight=1)\r\n        self.albumFrame.grid_rowconfigure(0, weight=1)\r\n\r\n        self.grid_rowconfigure(0, weight=1)\r\n        self.grid_columnconfigure(0, weight=2)\r\n        self.grid_columnconfigure(1, weight=10)\r\n        self.grid_columnconfigure(2, weight=6)\r\n        self.grid_columnconfigure(3, weight=6)\r\n        self.grid_columnconfigure(4, weight=1)\r\n        self.grid_propagate(False)\r\n\r\n        self.iconFrame.bind('<Configure>', self.icon_size)\r\n        self.titleFrame.bind('<Configure>', self.title_size)\r\n        self.albumFrame.bind('<Configure>', self.album_size)\r\n        self.artistFrame.bind('<Configure>', self.artist_size)\r\n        self.menuFrame.bind('<Configure>', self.menu_size)\r\n\r\n        self.bind('<Button-1>', self.click)\r\n        self.bind('<Enter>', self.enter)\r\n        self.bind('<Leave>', self.leave)\r\n\r\n    @staticmethod\r\n    def prepare_icon(filename, size):\r\n        icon = Image.open('images/' + filename)\r\n        icon = icon.resize((size, size), Image.ANTIALIAS)\r\n        icon = ImageTk.PhotoImage(icon)\r\n        return icon\r\n\r\n    @staticmethod\r\n    def bg_config(frame, bg):\r\n        # check_frame = '.!frame.!filterframe.!userentry'\r\n        # if str(frame).find(check_frame) == -1:\r\n        #     return\r\n        frame.iconFrame.config(bg=bg)\r\n        frame.titleLabel.config(bg=bg)\r\n        frame.albumLabel.config(bg=bg)\r\n        frame.artistLabel.config(bg=bg)\r\n        frame.menuFrame.config(bg=bg)\r\n        frame.menuFrame.menuButton.config(bg=bg)\r\n        frame.like_button.config(bg=bg)\r\n        frame.play_button.config(bg=bg)\r\n\r\n    @staticmethod\r\n    def fg_config(frame, fg):\r\n        # check_frame = '.!container.!top.!topright.!toprightbottom.!main.!frame.!filterframe.!userentry'\r\n        # if str(frame).find(check_frame) > 0:\r\n        #     return\r\n        frame.titleLabel.config(foreground=fg)\r\n        frame.albumLabel.config(foreground=fg)\r\n        frame.artistLabel.config(foreground=fg)\r\n\r\n    def enter(self, event):\r\n        from Base.listOfPage import current_playing\r\n        if self.focus_get() != self:\r\n            self.bg_config(self, '#222222')\r\n            self.menuFrame.menuButton.grid(row=0, column=0, sticky='nsew')\r\n        if self not in current_playing:\r\n            self.play_button.config(image=self.pause_icon)\r\n        return\r\n\r\n    def leave(self, event):\r\n        from Base.listOfPage import current_playing\r\n        if self.focus_get() != self:\r\n            self.bg_config(self, '#181818')\r\n            self.menuFrame.menuButton.grid_forget()\r\n        if self not in current_playing:\r\n            self.play_button.config(image=self.music_icon)\r\n\r\n        return\r\n\r\n    def click(self, event):\r\n        check_frame = '.!frame.!filterframe.!userentry'\r\n        print(self.focus_get())\r\n        if str(self.focus_get()) != '.' and str(self.focus_get()).find(check_frame) == -1:\r\n            print('hi')\r\n            self.bg_config(self.focus_get(), '#181818')\r\n            self.focus_get().menuFrame.menuButton.grid_forget()\r\n        self.focus_set()\r\n        self.menuFrame.menuButton.grid(row=0, column=0, sticky='nsew')\r\n        self.bg_config(self, '#333333')\r\n\r\n    def double_click(self, event):\r\n        from Base.listOfPage import current_playing\r\n        if len(current_playing) != 0:\r\n            frame = current_playing.pop()\r\n            self.fg_config(frame, fg='#888888')\r\n            frame.play_button.config(image=self.music_icon)\r\n            frame.play_button.playing = False\r\n            frame.master.master.master.master.master.head.text_frame.play_button.isPlaying = False\r\n            frame.master.master.master.master.master.head.text_frame.play_button.ifPlaying()\r\n            frame.play_music.Stop()\r\n\r\n        if len(current_playing) == 0:\r\n            current_playing.append(self)\r\n\r\n        self.fg_config(self, fg='#1DB954')\r\n        self.play_button.config(image=self.volume_icon)\r\n        self.play_button.playing = True\r\n        self.master.master.master.master.master.head.text_frame.play_button.isPlaying = True\r\n        self.master.master.master.master.master.head.text_frame.play_button.ifPlaying()\r\n\r\n        from Base.listOfPage import currentTrack\r\n        if len(currentTrack) == 0:\r\n            currentTrack.append({})\r\n            currentTrack[0]['title'] = self.title\r\n            currentTrack[0]['url'] = self.url\r\n            self.play_music = Track(self, trackName=self.title,\r\n                                    trackUrl=self.url,\r\n                                    artist=self.artist,\r\n                                    image=self.master.master.master.master.master.image)\r\n\r\n            currentTrack[0]['instance'] = self.play_music\r\n        else:\r\n            # if currentTrack[0]['title'] == self.title:\r\n            #     self.play_music = currentTrack[0]['instance']\r\n            if currentTrack[0]['instance'] == self.play_music:\r\n                self.play_music = currentTrack[0]['instance']\r\n            else:\r\n                from Base.listOfPage import bottomPage\r\n                _ = bottomPage.pop()\r\n                currentTrack[0]['title'] = self.title\r\n                currentTrack[0]['url'] = self.url\r\n                self.play_music = Track(self,\r\n                                        trackName=self.title,\r\n                                        trackUrl=self.url,\r\n                                        artist=self.artist,\r\n                                        image=self.master.master.master.master.master.image)\r\n                currentTrack[0]['instance'] = self.play_music\r\n\r\n        self.play_music.Play()\r\n\r\n    def title_size(self, event):\r\n        from ...TitleFrame import title_size\r\n        self.titleFrame.config(width=title_size)\r\n        self.titleFrame.grid_propagate(False)\r\n\r\n    def icon_size(self, event):\r\n        from ...TitleFrame import icon_size\r\n        self.iconFrame.config(width=icon_size)\r\n        self.iconFrame.grid_propagate(False)\r\n\r\n    def album_size(self, event):\r\n        from ...TitleFrame import album_size\r\n        self.albumFrame.config(width=album_size)\r\n        self.albumFrame.grid_propagate(False)\r\n\r\n    def artist_size(self, event):\r\n        from ...TitleFrame import artist_size\r\n        self.artistFrame.config(width=artist_size)\r\n        self.artistFrame.grid_propagate(False)\r\n\r\n    def menu_size(self, event):\r\n        from ...TitleFrame import menu_size\r\n        self.menuFrame.config(width=menu_size)\r\n        self.menuFrame.grid_propagate(False)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Pages/MusicPage/Components/Content/Components/MusicFrame.py	(revision e49b903c75f6ed87827e97ccafe151cd1bc26257)
+++ Pages/MusicPage/Components/Content/Components/MusicFrame.py	(date 1587939505100)
@@ -84,6 +84,7 @@
         self.bind('<Enter>', self.enter)
         self.bind('<Leave>', self.leave)
 
+
     @staticmethod
     def prepare_icon(filename, size):
         icon = Image.open('images/' + filename)
Index: Pages/MusicPage/Components/TextFrame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nimport pyglet\r\nfrom PIL import ImageTk, Image\r\nimport tkinter.font as tkfont\r\n\r\n\r\nclass TextFrame(tk.Frame):\r\n    def __init__(self, master, text, data, *args, **kwargs):\r\n        tk.Frame.__init__(self, master, *args, **kwargs)\r\n        self['background'] = '#000000'\r\n\r\n        self.text = text\r\n\r\n        pyglet.font.add_file('fonts/Play/Play-Bold.ttf')\r\n        self.head = tkfont.Font(family=\"Pragatic Narrow\", size=28, weight=\"bold\")\r\n        self.support = tkfont.Font(family=\"Play\", size=10, weight=\"bold\")\r\n\r\n        self.button_heart_raw = Image.open('images/button_heart.png')\r\n        self.button_heart = self.button_heart_raw.resize((35, 35), Image.ANTIALIAS)\r\n        self.button_heart_active = self.button_heart_raw.resize((37, 37), Image.ANTIALIAS)\r\n        self.button_heart = ImageTk.PhotoImage(self.button_heart)\r\n        self.button_heart_active = ImageTk.PhotoImage(self.button_heart_active)\r\n\r\n        self.button_liked_raw = Image.open('images/love_filled.png')\r\n        self.button_liked = self.button_liked_raw.resize((35, 35), Image.ANTIALIAS)\r\n        self.button_liked_active = self.button_liked_raw.resize((37, 37), Image.ANTIALIAS)\r\n        self.button_liked = ImageTk.PhotoImage(self.button_liked)\r\n        self.button_liked_active = ImageTk.PhotoImage(self.button_liked_active)\r\n\r\n        self.music_menu_button_raw = Image.open('images/music_menu_button.png')\r\n        self.music_menu_button = self.music_menu_button_raw.resize((33, 33), Image.ANTIALIAS)\r\n        self.music_menu_button_active = self.music_menu_button_raw.resize((35, 35), Image.ANTIALIAS)\r\n        self.music_menu_button = ImageTk.PhotoImage(self.music_menu_button)\r\n        self.music_menu_button_active = ImageTk.PhotoImage(self.music_menu_button_active)\r\n\r\n        self.play_raw = Image.open('images/play.png')\r\n        self.play = self.play_raw.resize((100, 35), Image.ANTIALIAS)\r\n        self.play_active = self.play_raw.resize((103, 38), Image.ANTIALIAS)\r\n        self.play = ImageTk.PhotoImage(self.play)\r\n        self.play_active = ImageTk.PhotoImage(self.play_active)\r\n\r\n        # self.menu_button_image = tk.PhotoImage(file=r'images/button_heart.png')\r\n\r\n        self.text_heading = tk.Label(self,\r\n                                     background='#000000',\r\n                                     foreground='white',\r\n                                     text=text,\r\n                                     font=self.head,\r\n                                     anchor=tk.SW,\r\n                                     padx=0,\r\n                                     pady=0)\r\n        self.text_support = tk.Label(self,\r\n                                     bg='#000000',\r\n                                     foreground='white',\r\n                                     text='By Amplify.',\r\n                                     font=self.support,\r\n                                     anchor=tk.NW\r\n                                     )\r\n        self.button_region = tk.Frame(self, bg='#000000', height=38)\r\n\r\n        self.play_button = PlayHeadIcon(self.button_region, data=data,)\r\n\r\n        self.like_button = HeadIcon(self.button_region,\r\n                                    image=self.button_heart,\r\n                                    active_image=self.button_heart_active,\r\n                                    width=39,\r\n                                    command=self.liked)\r\n        self.liked_button = HeadIcon(self.button_region,\r\n                                     image=self.button_liked,\r\n                                     active_image=self.button_liked_active,\r\n                                     width=39,\r\n                                     command=self.unliked)\r\n        self.menu_button = HeadIcon(self.button_region,\r\n                                    image=self.music_menu_button,\r\n                                    active_image=self.music_menu_button_active,\r\n                                    width=37)\r\n\r\n        self.play_button.grid(row=0, column=0, sticky='nsew')\r\n        self.like_button.grid(row=0, column=1, sticky='nsew', padx=(0, 5))\r\n        self.liked_button.grid(row=0, column=1, sticky='nsew', padx=(0, 5))\r\n        self.menu_button.grid(row=0, column=2, sticky='nsew')\r\n\r\n        self.like_button.tkraise()\r\n\r\n        self.button_region.grid_rowconfigure(0, weight=1)\r\n        self.button_region.grid_propagate(False)\r\n\r\n        self.text_heading.grid(row=0, column=0, sticky='nsew')\r\n        self.text_support.grid(row=1, column=0, sticky='nsew')\r\n        self.button_region.grid(row=2, column=0, sticky='nsew')\r\n\r\n        self.grid_columnconfigure(0, weight=1)\r\n        self.grid_rowconfigure((0, 1, 2), weight=1)\r\n        self.grid_propagate(False)\r\n\r\n    def liked(self):\r\n        self.liked_button.tkraise()\r\n\r\n    def unliked(self):\r\n        self.like_button.tkraise()\r\n\r\n\r\nclass HeadIcon(tk.Button):\r\n    def __init__(self, master, image, active_image, *args, **kwargs):\r\n        tk.Button.__init__(self, master, *args, **kwargs)\r\n        self['background'] = '#000000'\r\n        self['activebackground'] = '#000000'\r\n        self['bd'] = 0\r\n        self['image'] = image\r\n\r\n        self.active_image = active_image\r\n        self.image = image\r\n\r\n        self.bind('<Enter>', self.enter)\r\n        self.bind('<Leave>', self.leave)\r\n\r\n        self.grid_propagate(False)\r\n\r\n    def enter(self, event):\r\n        self.config(image=self.active_image)\r\n\r\n    def leave(self, event):\r\n        self.config(image=self.image)\r\n\r\n\r\nclass PlayHeadIcon(tk.Button):\r\n    def __init__(self, master, data, *args, **kwargs):\r\n        tk.Button.__init__(self, master, *args, **kwargs)\r\n\r\n        self.isPlaying = False\r\n        self.data = data\r\n\r\n        self.play_raw = Image.open('images/play.png')\r\n        self.play = self.play_raw.resize((100, 35), Image.ANTIALIAS)\r\n        self.play_active = self.play_raw.resize((103, 38), Image.ANTIALIAS)\r\n        self.play = ImageTk.PhotoImage(self.play)\r\n        self.play_active = ImageTk.PhotoImage(self.play_active)\r\n\r\n        self.pause_raw = Image.open('images/pause.png')\r\n        self.pause = self.pause_raw.resize((100, 35), Image.ANTIALIAS)\r\n        self.pause_active = self.pause_raw.resize((103, 38), Image.ANTIALIAS)\r\n        self.pause = ImageTk.PhotoImage(self.pause)\r\n        self.pause_active = ImageTk.PhotoImage(self.pause_active)\r\n\r\n        self['background'] = '#000000'\r\n        self['activebackground'] = '#000000'\r\n        self['bd'] = 0\r\n        self['width'] = 105\r\n        self['image'] = self.play\r\n\r\n        self.bind('<Enter>', self.enter)\r\n        self.bind('<Leave>', self.leave)\r\n        self.bind('<Button-1>', self.click)\r\n\r\n        self.grid_propagate(False)\r\n        # self.after(100, self.ifPlaying)\r\n\r\n    def ifPlaying(self):\r\n        if self.isPlaying:\r\n            self.config(image=self.pause)\r\n        else:\r\n            self.config(image=self.play)\r\n\r\n    def enter(self, event):\r\n        if self.isPlaying:\r\n            self.config(image=self.pause_active)\r\n            return\r\n\r\n        self.config(image=self.play_active)\r\n\r\n    def leave(self, event):\r\n        if self.isPlaying:\r\n            self.config(image=self.pause)\r\n            return\r\n        self.config(image=self.play)\r\n\r\n    def click(self, event):\r\n        from Base.listOfPage import current_playing\r\n        from Base.listOfPage import musicList\r\n        if self.isPlaying:\r\n            self.config(image=self.play)\r\n            if len(current_playing) != 0:\r\n                current_playing[0].play_button.click()\r\n        else:\r\n            from Base.listOfPage import focusCard\r\n            if len(focusCard) != 0:\r\n                previous_focus = focusCard.pop()\r\n                previous_focus.isPlaying = False\r\n                previous_focus.ifPlaying()\r\n            focusCard.append(self)\r\n            self.config(image=self.pause)\r\n            if len(current_playing) != 0:\r\n                if current_playing[0].master.master.master.master.master == self.master.master.master.master:\r\n                    current_playing[0].play_button.click()\r\n                else:\r\n                    for i in musicList:\r\n                        for k, v in i.items():\r\n                            if k == self.master.master.master.master:\r\n                                v[0].play_button.click()\r\n\r\n            elif len(current_playing) == 0:\r\n                for i in musicList:\r\n                    for k, v in i.items():\r\n                        if k == self.master.master.master.master:\r\n                            v[0].play_button.click()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Pages/MusicPage/Components/TextFrame.py	(revision e49b903c75f6ed87827e97ccafe151cd1bc26257)
+++ Pages/MusicPage/Components/TextFrame.py	(date 1587939505102)
@@ -70,10 +70,31 @@
                                      active_image=self.button_liked_active,
                                      width=39,
                                      command=self.unliked)
-        self.menu_button = HeadIcon(self.button_region,
-                                    image=self.music_menu_button,
-                                    active_image=self.music_menu_button_active,
-                                    width=37)
+        # self.menu_button = HeadIcon(self.button_region,
+        #                             image=self.music_menu_button,
+        #                             active_image=self.music_menu_button_active,
+        #                             width=37)
+        self.menu_button = tk.Menubutton(
+                                self.button_region,
+                                image=self.music_menu_button,
+                                bg="#000000", activebackground="#000000",
+                                #active_image=self.music_menu_button_active,
+                                width=37, bd=0
+                            )
+        self.menu_button.menu = tk.Menu(
+                                    self.menu_button,
+                                    tearoff=0,
+                                    background="#404040",
+                                    activebackground="#404040",
+                                    foreground="white",
+                                    activeforeground="white",
+                                    bd=0
+                                )
+        self.menu_button['menu'] = self.menu_button.menu
+        self.menu_button.menu.add_command(label="Amplify EXCLUSIVES")
+
+        self.menu_button.bind("<Enter>",lambda e: self.enterMenu(e))
+        self.menu_button.bind("<Leave>",lambda e: self.leaveMenu(e))
 
         self.play_button.grid(row=0, column=0, sticky='nsew')
         self.like_button.grid(row=0, column=1, sticky='nsew', padx=(0, 5))
@@ -99,6 +120,12 @@
     def unliked(self):
         self.like_button.tkraise()
 
+    def enterMenu(self,event):
+        self.menu_button['image'] = self.music_menu_button
+
+    def leaveMenu(self,event):
+        self.menu_button['image'] = self.music_menu_button_active
+
 
 class HeadIcon(tk.Button):
     def __init__(self, master, image, active_image, *args, **kwargs):
